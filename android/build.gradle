group = "com.example.flutter_biometric"
version = "1.0-SNAPSHOT"

buildscript {
    ext.kotlin_version = "1.8.22"
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.7.0")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
        classpath("org.aspectj:aspectjtools:1.9.21")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    namespace = "com.example.flutter_biometric"

    compileSdk = 35

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }
    
    buildFeatures {
        dataBinding = true
        viewBinding = true
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 21
    }

    dependencies {
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.0.0")
        
        // 添加生物识别相关依赖
        implementation("androidx.biometric:biometric:1.2.0-alpha05")
        implementation("androidx.fragment:fragment-ktx:1.6.2")
        implementation("androidx.core:core-ktx:1.12.0")
        
        // 添加 Material Design 依赖
        implementation("com.google.android.material:material:1.9.0")
        implementation("androidx.appcompat:appcompat:1.6.1")
        
        // 添加AspectJ支持
        implementation("org.aspectj:aspectjrt:1.9.21")
        
        // 添加CameraX相关依赖
        implementation("androidx.camera:camera-core:1.3.2")
        implementation("androidx.camera:camera-camera2:1.3.2")
        implementation("androidx.camera:camera-lifecycle:1.3.2")
        implementation("androidx.camera:camera-view:1.3.2")
        implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}
